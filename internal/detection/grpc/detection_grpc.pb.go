// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: detection.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetectionServiceClient is the client API for DetectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectionServiceClient interface {
	DetectedObject(ctx context.Context, in *DetectReq, opts ...grpc.CallOption) (*DetectRes, error)
}

type detectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectionServiceClient(cc grpc.ClientConnInterface) DetectionServiceClient {
	return &detectionServiceClient{cc}
}

func (c *detectionServiceClient) DetectedObject(ctx context.Context, in *DetectReq, opts ...grpc.CallOption) (*DetectRes, error) {
	out := new(DetectRes)
	err := c.cc.Invoke(ctx, "/rpc.detection.DetectionService/DetectedObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectionServiceServer is the server API for DetectionService service.
// All implementations must embed UnimplementedDetectionServiceServer
// for forward compatibility
type DetectionServiceServer interface {
	DetectedObject(context.Context, *DetectReq) (*DetectRes, error)
	mustEmbedUnimplementedDetectionServiceServer()
}

// UnimplementedDetectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetectionServiceServer struct {
}

func (UnimplementedDetectionServiceServer) DetectedObject(context.Context, *DetectReq) (*DetectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectedObject not implemented")
}
func (UnimplementedDetectionServiceServer) mustEmbedUnimplementedDetectionServiceServer() {}

// UnsafeDetectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectionServiceServer will
// result in compilation errors.
type UnsafeDetectionServiceServer interface {
	mustEmbedUnimplementedDetectionServiceServer()
}

func RegisterDetectionServiceServer(s grpc.ServiceRegistrar, srv DetectionServiceServer) {
	s.RegisterService(&DetectionService_ServiceDesc, srv)
}

func _DetectionService_DetectedObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionServiceServer).DetectedObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.detection.DetectionService/DetectedObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionServiceServer).DetectedObject(ctx, req.(*DetectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectionService_ServiceDesc is the grpc.ServiceDesc for DetectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.detection.DetectionService",
	HandlerType: (*DetectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectedObject",
			Handler:    _DetectionService_DetectedObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detection.proto",
}
